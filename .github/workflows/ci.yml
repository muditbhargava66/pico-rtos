name: Pico-RTOS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  # Simplified build matrix
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            install-deps: sudo apt-get update && sudo apt-get install -y gcc-arm-none-eabi cmake ninja-build
          - os: macos-latest
            install-deps: brew install arm-none-eabi-gcc cmake ninja
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: ${{ matrix.install-deps }}
      shell: bash
    
    - name: Setup Pico SDK
      run: git submodule update --init --recursive
      shell: bash
    
    - name: Configure and build
      run: |
        python3 scripts/build.py configure --build-type Release --enable-examples
        python3 scripts/build.py build
      shell: bash
    
    - name: Run build system tests
      run: python3 tests/build_system_test.py
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: pico-rtos-build-${{ github.sha }}
        path: |
          build/libpico_rtos.a
          build/*.uf2
        retention-days: 7

  # Basic code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi clang-format
    
    - name: Check code formatting (if clang-format config exists)
      run: |
        if [ -f .clang-format ]; then
          find src include examples tests -name "*.c" -o -name "*.h" | \
          xargs clang-format --dry-run --Werror || echo "Code formatting issues found"
        else
          echo "No .clang-format config found, skipping formatting check"
        fi
    
    - name: Basic code checks
      run: |
        echo "Running basic code quality checks..."
        # Check for common issues
        if grep -r "TODO\|FIXME" src/ include/ --exclude-dir=extern 2>/dev/null; then
          echo "Found TODO/FIXME comments (informational)"
        fi
        echo "Code quality checks completed"